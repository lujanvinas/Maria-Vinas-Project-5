{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","e","setState","userInput","target","value","handleClick","preventDefault","database","ref","push","state","deleteItem","itemId","child","remove","items","on","snapshot","console","log","val","data","newItemsArray","propertyName","itemObject","id","item","className","action","htmlFor","onChange","this","type","placeholder","onClick","map","myItem","key","icon","faTrash","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAcEA,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,E,wBC+FaS,E,kDArGb,aAAc,IAAD,8BACX,gBAgCFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAEG,OAAOC,SAnCX,EAwCbC,YAAc,SAACL,GACbA,EAAEM,iBAGYjB,EAASkB,WAAWC,MAE5BC,KAAK,EAAKC,MAAMR,WAGtB,EAAKD,SAAS,CACZC,UAAU,MAlDD,EAwDbS,WAAa,SAACC,GACCvB,EAASkB,WAAWC,MAC3BK,MAAMD,GAAQE,UAxDpB,EAAKJ,MAAQ,CACXK,MAAO,GACPb,UAAU,IAJD,E,gEAQQ,IAAD,OACJb,EAASkB,WAAWC,MAE5BQ,GAAG,SAAS,SAACC,GACjBC,QAAQC,IAAIF,EAASG,OAErB,IAAMC,EAAOJ,EAASG,MAEhBE,EAAgB,GAEtB,IAAK,IAAIC,KAAgBF,EAAM,CAC7B,IAAMG,EAAa,CACjBC,GAAIF,EACJG,KAAML,EAAKE,IAEbD,EAAcb,KAAMe,GAGtB,EAAKvB,SAAS,CACZc,MAAOO,S,+BAmCJ,IAAD,OACN,OACE,yBAAKK,UAAU,OACb,4CACA,8DACA,uDAGA,0BAAMC,OAAO,UACX,2BAAOC,QAAQ,WAAf,0BACA,2BAAOC,SAAYC,KAAKhC,aAAeK,MAAQ2B,KAAKrB,MAAMR,UAAY8B,KAAK,OAAOP,GAAI,UAAUQ,YAAY,kBAE5G,4BAAQC,QAAWH,KAAK1B,aAAxB,aAIF,4BAEE0B,KAAKrB,MAAMK,MAAMoB,KAAK,SAACC,GAErB,OACE,wBAAIC,IAAKD,EAAOX,IAChB,+BAAKW,EAAOV,KAAZ,MAAqBU,EAAOX,GAG5B,4BAAQS,QAAU,kBAAM,EAAKvB,WAAWyB,EAAOX,MAC/C,kBAAC,IAAD,CAAiBE,UAAU,UAAUW,KAAMC,kB,GAzFvCC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.65634622.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDZchN1Zm4hZekdaZ00bZcsPw60gGhzOUs\",\n    authDomain: \"packing-list-cc226.firebaseapp.com\",\n    databaseURL: \"https://packing-list-cc226.firebaseio.com\",\n    projectId: \"packing-list-cc226\",\n    storageBucket: \"packing-list-cc226.appspot.com\",\n    messagingSenderId: \"624836951041\",\n    appId: \"1:624836951041:web:3a5b1b98ba30fb431f5400\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      items: [],\n      userInput:\"\"\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n      console.log(snapshot.val());\n\n      const data = snapshot.val();\n\n      const newItemsArray = [];\n\n      for (let propertyName in data) {\n        const itemObject = {\n          id: propertyName,\n          item: data[propertyName]\n        }\n        newItemsArray.push( itemObject );\n      }\n\n      this.setState({\n        items: newItemsArray\n      })\n    })\n  }\n\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    \n    })\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n  \n\n    const dbRef = firebase.database().ref();\n\n    dbRef.push(this.state.userInput);\n    // this will add the new items to the firebase database\n\n    this.setState({\n      userInput:\"\"\n    })\n  }\n\n\n  // deleting items from database\n  deleteItem = (itemId) => {\n    const dbRef= firebase.database().ref();\n    dbRef.child(itemId).remove();\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Packing List</h1>\n        <h2>Going on a trip? Time to pack!</h2>\n        <h3>Add items to your list:</h3>\n        \n       \n        <form action=\"submit\">\n          <label htmlFor=\"newItem\">Add items to your list</label>\n          <input onChange= { this.handleChange } value={ this.state.userInput } type=\"text\" id= \"newItem\" placeholder=\"i.e. passport\"/>\n\n          <button onClick= { this.handleClick }>Add item</button>\n\n        </form>\n\n        <ul>\n        {\n          this.state.items.map( (myItem) => {\n\n            return (\n              <li key={myItem.id}>\n              <p> {myItem.item} - {myItem.id}\n                \n\n              <button onClick={ () => this.deleteItem(myItem.id) }>\n              <FontAwesomeIcon className=\"faicons\" icon={faTrash} />\n                  </button>\n              </p>\n              </li>\n            )\n          })\n        }\n        </ul>  \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}